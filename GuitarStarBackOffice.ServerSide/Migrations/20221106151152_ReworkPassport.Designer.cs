// <auto-generated />
using System;
using GuitarStarBackOffice.ServerSide.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuitarStarBackOffice.ServerSide.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221106151152_ReworkPassport")]
    partial class ReworkPassport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Employee", b =>
                {
                    b.Property<Guid>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasportSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.Property<Guid>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalOrderAmount")
                        .HasColumnType("float");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int>("paymentStatus")
                        .HasColumnType("int");

                    b.HasKey("IdOrder");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OrderElements");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.OrderElement", b =>
                {
                    b.Property<Guid>("IdOrderElement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ElementsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdOrderElement");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderElements");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Post", b =>
                {
                    b.Property<Guid>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("IdPost");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.PostEmployee", b =>
                {
                    b.Property<Guid>("IdPostEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPostEmployee");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PostId");

                    b.ToTable("PostEmployees");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.Property<Guid>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProduct");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Shipment", b =>
                {
                    b.Property<Guid>("IdShipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdShipment");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Supplier", b =>
                {
                    b.Property<Guid>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.WareHouse", b =>
                {
                    b.Property<Guid>("IdEWareHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEWareHouse");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Employee", "Employee")
                        .WithMany("OrderElements")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.OrderElement", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Order", "Order")
                        .WithMany("OrderElements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.Product", "Product")
                        .WithMany("OrderElemnts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.PostEmployee", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Employee", "Employee")
                        .WithMany("PostEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.Post", "Post")
                        .WithMany("PostEmployees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.WareHouse", "WareHouse")
                        .WithMany("Products")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Shipment", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Supplier", "Supplier")
                        .WithMany("Shipmnets")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.WareHouse", "Warehouse")
                        .WithMany("Shipments")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Employee", b =>
                {
                    b.Navigation("OrderElements");

                    b.Navigation("PostEmployees");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.Navigation("OrderElements");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Post", b =>
                {
                    b.Navigation("PostEmployees");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.Navigation("OrderElemnts");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Supplier", b =>
                {
                    b.Navigation("Shipmnets");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.WareHouse", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
