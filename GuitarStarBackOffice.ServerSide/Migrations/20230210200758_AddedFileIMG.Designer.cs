// <auto-generated />
using System;
using GuitarStarBackOffice.ServerSide.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuitarStarBackOffice.ServerSide.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230210200758_AddedFileIMG")]
    partial class AddedFileIMG
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Category", b =>
                {
                    b.Property<Guid>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategory");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            IdCategory = new Guid("11a0d7ce-007c-44ac-9da6-fe333ba042be"),
                            CategoryName = "Акустическая гитара"
                        },
                        new
                        {
                            IdCategory = new Guid("4b94a8db-ac66-4a7f-9045-59672ff62e64"),
                            CategoryName = "Электро гитара"
                        },
                        new
                        {
                            IdCategory = new Guid("da7d35d3-735c-40f7-b16c-cb65c1ac0d3f"),
                            CategoryName = "Бас гитара"
                        },
                        new
                        {
                            IdCategory = new Guid("497d6809-488d-4252-9cca-d04956baa87b"),
                            CategoryName = "Укулеле"
                        },
                        new
                        {
                            IdCategory = new Guid("e571e876-cce6-4cde-ade1-d36732f3761d"),
                            CategoryName = "Балалайка"
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Employee", b =>
                {
                    b.Property<Guid>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccountCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasportNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("PasportSeries")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<Guid?>("PostId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployee");

                    b.HasIndex("PostId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            IdEmployee = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            AccountCreateDate = new DateTime(2023, 2, 10, 23, 7, 57, 976, DateTimeKind.Local).AddTicks(667),
                            DateOfBirth = new DateTime(2002, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEmployment = new DateTime(2022, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            EmployeeRole = 0,
                            Name = "Иван",
                            PasportNumber = "111111",
                            PasportSeries = "1111",
                            Password = "D033E22AE348AEB5660FC2140AEC35850C4DA997",
                            Patronymic = "Иванович",
                            PostId = new Guid("07ceffea-914d-4509-b21d-e3a8042b6bf9"),
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.EmployeeHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeHistories");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.FileIMG", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.Property<Guid>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalOrderAmount")
                        .HasColumnType("float");

                    b.Property<int>("orderStatus")
                        .HasColumnType("int");

                    b.Property<int>("payementStatus")
                        .HasColumnType("int");

                    b.HasKey("IdOrder");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            IdOrder = new Guid("c99a7126-6bb2-4b9c-aa21-fcb4a7817f54"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 1,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("67f321b4-d3a4-4e26-9d1d-5abd4c5ad328"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 2,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("e98676b9-4c4c-47f6-86cd-06cc5d8d0ffb"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 3,
                            TotalOrderAmount = 19999.990000000002,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("2835bdb2-e0b7-4eff-9760-54d8d508ab0d"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 4,
                            TotalOrderAmount = 19999.990000000002,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("4b2ef55c-bbb0-48e3-8dd0-646d1c08f5f8"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 5,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("09100597-57f0-4fb2-b4c8-7c19dff08311"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 6,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("ca8c9db3-40a7-4a50-b148-6678441cfe54"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 7,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("733df3fb-5830-40e8-b206-1ffee7600add"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 8,
                            TotalOrderAmount = 9999.9899999999998,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("7e255600-deb8-4697-b425-0516938fdcb1"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 9,
                            TotalOrderAmount = 999999.0,
                            orderStatus = 2,
                            payementStatus = 1
                        },
                        new
                        {
                            IdOrder = new Guid("8380bc2e-b6d2-4de6-b2f4-f5d296997659"),
                            EmployeeId = new Guid("caf7b5ff-56cf-40d7-93d2-685191c8774a"),
                            OrderDate = new DateTime(2022, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderNumber = 10,
                            TotalOrderAmount = 100000.0,
                            orderStatus = 2,
                            payementStatus = 1
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.OrderElement", b =>
                {
                    b.Property<Guid>("IdOrderElement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ElementsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdOrderElement");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderElements");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Post", b =>
                {
                    b.Property<Guid>("IdPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("IdPost");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            IdPost = new Guid("2f8c686a-bf13-42c7-aad5-1f3ef26e7b55"),
                            PostName = "Сотрудник отдела продаж",
                            Salary = 45000.0
                        },
                        new
                        {
                            IdPost = new Guid("834a256a-6a3a-4035-ae0f-a121bff88244"),
                            PostName = "Сотрудник склада",
                            Salary = 34000.0
                        },
                        new
                        {
                            IdPost = new Guid("8cb375a6-9a1d-49f1-8069-e832b085530a"),
                            PostName = "Сотрудник отдела кадров",
                            Salary = 150000.0
                        },
                        new
                        {
                            IdPost = new Guid("f8393c7d-3dad-4055-a68a-2b56bae6f21c"),
                            PostName = "Бухгалтер",
                            Salary = 65000.0
                        },
                        new
                        {
                            IdPost = new Guid("07ceffea-914d-4509-b21d-e3a8042b6bf9"),
                            PostName = "Администратор",
                            Salary = 1.0
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.Property<Guid>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FileImageId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("WareHouseId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProduct");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FileImageId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            IdProduct = new Guid("5e19d537-d1eb-4a96-97ec-008b1874ec80"),
                            CategoryId = new Guid("11a0d7ce-007c-44ac-9da6-fe333ba042be"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Классическая гитара Doff RGC",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("a53b5791-5769-4723-8996-5839add00bd3"),
                            CategoryId = new Guid("11a0d7ce-007c-44ac-9da6-fe333ba042be"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Акустическая гитара Doff D016A",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("7e3a380b-4eb3-4081-8872-b9fa93b2910f"),
                            CategoryId = new Guid("4b94a8db-ac66-4a7f-9045-59672ff62e64"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Электрогитара Fabio ST100 N",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("691d0935-f356-49a8-a857-01cda670fbf0"),
                            CategoryId = new Guid("4b94a8db-ac66-4a7f-9045-59672ff62e64"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Электрогитара Caraya E235BK",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("a70046b5-3427-4fee-b0de-5ee1445ddac4"),
                            CategoryId = new Guid("da7d35d3-735c-40f7-b16c-cb65c1ac0d3f"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Бас-гитара Cort Action-HH4-TLB Action Series",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("483359ba-0f10-4224-94b1-20f6dc8457de"),
                            CategoryId = new Guid("da7d35d3-735c-40f7-b16c-cb65c1ac0d3f"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Бас-гитара Prodipe JMFJB80MAASH4C JB80MA MA",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("dcdd60d8-385f-400c-9597-726f67bbf18b"),
                            CategoryId = new Guid("497d6809-488d-4252-9cca-d04956baa87b"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "RFU10S Friends Series Укулеле сопрано, Ortega",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("e21d96db-da7c-4ff9-8025-dab8b66961e6"),
                            CategoryId = new Guid("497d6809-488d-4252-9cca-d04956baa87b"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Укулеле концерт LAG TKU-130C",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("76acd5f8-b37e-4954-82ce-fdcb41deebcd"),
                            CategoryId = new Guid("e571e876-cce6-4cde-ade1-d36732f3761d"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "Балалайка 3-струнная DOFF BBM Bass Master",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        },
                        new
                        {
                            IdProduct = new Guid("faeb4309-e0a0-44a6-b8ec-5f2e73c3fc2f"),
                            CategoryId = new Guid("e571e876-cce6-4cde-ade1-d36732f3761d"),
                            FileImageId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            ProductName = "SBF-RRE Русский рок Балалайка электроакустическая, трехструнная, Балалайкеръ",
                            ProductPrice = 9999.9899999999998,
                            WareHouseId = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30")
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.ProductHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductHistories");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Shipment", b =>
                {
                    b.Property<Guid>("IdShipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SupplierId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdShipment");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Supplier", b =>
                {
                    b.Property<Guid>("IdSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSupplier");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.WareHouse", b =>
                {
                    b.Property<Guid>("IdEWareHouse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEWareHouse");

                    b.ToTable("WareHouses");

                    b.HasData(
                        new
                        {
                            IdEWareHouse = new Guid("0c43ba79-f67a-46fa-a7ad-bef8dd1cff30"),
                            Address = "Ольховская ул., 14, стр. 1, Москва"
                        });
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Employee", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.OrderElement", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Order", "Order")
                        .WithMany("OrderElements")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.Product", "Product")
                        .WithMany("OrderElemnts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.FileIMG", "FileImage")
                        .WithMany("Products")
                        .HasForeignKey("FileImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.WareHouse", "WareHouse")
                        .WithMany("Products")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FileImage");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Shipment", b =>
                {
                    b.HasOne("GuitarStarBackOffice.Shared.Supplier", "Supplier")
                        .WithMany("Shipmnets")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuitarStarBackOffice.Shared.WareHouse", "Warehouse")
                        .WithMany("Shipments")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.FileIMG", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Order", b =>
                {
                    b.Navigation("OrderElements");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Product", b =>
                {
                    b.Navigation("OrderElemnts");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.Supplier", b =>
                {
                    b.Navigation("Shipmnets");
                });

            modelBuilder.Entity("GuitarStarBackOffice.Shared.WareHouse", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
